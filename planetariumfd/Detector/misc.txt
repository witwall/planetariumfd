When a video is becoming too long, we can serialize it to disk once, but keep it alive with
a wasSerialized flag on, so that it prevents this face to be video'd again.
so 


============
How to get the frames in deleteThread?
	Each face will have a pointer to a history entry
	The history entry should have storage which is not copied when removed from history
		as happens with cvSeq.
		
		build map<frame_id,FDHistoryEntry

Handling missing frames








Todo:

1. Make configurable at runtime (so we can change params in the event, based on camera, lighting, mem available etc.)





1.  How to save?
save to named pipes, which are written to the net (no disk IO)
save to files, write filenames to stdout
rectangles are always square - do we want to mess with that (are they in the middle vertically?)

How to select the best image in the sequence (thread?) 


Video cropping

Save min(x) max(x)
	 min(y) max(y) 
	 per thread, time begin, time end


Multithreading

deleteHistory:
	if counter
	
add consecutive non missed count
nisayon
		result.rect.x = result.rect.y  = result.rect.width =  result.rect.height = -1; 

-----------------------------


FdProcessFaces
	//not specific for 1 face..
	addToHistory(pImg,pSeqIn);
		createFrameCopy
		cvCloneSeq
		cvCreateHistoryEntry
	if (full)
		popHistory();
		popAndCleanEmptyThreads();
		
		
		
------------------------------
implementation 

Main thread [high priority]				X 1   lives all the time
Releasing history thread [low priority] X 1	  lives all the time
Save-thread   X many						X N   per video being saved


Main thread: detection + inits save threads + fills "to be released" queue
	each history entry has a counter (mutex)
	each thread increases the counter for the relevant history entry
	when an entry is too old to be in the buffer, it is added to the to-be-released-queue, 
		and the releasing thread is signaled.
	when a face-thread ends, it opens a Save-cpu-thread which runs over it's frames 
		in history (to create the video), and decreases the counter of each frame not needed anymore by this thread.
		
		
		
FaceThread
	min X
	max X
	min Y
	max Y
	addCandidate
	attachBestCandidate
		addSubFrame()
			update min/max etc.
		LockFrame();
		
	~FaceThread() {
		Serialize() if above threshold
		ReleaseFrameLocks() &  // to another thread


==========
//========
#include <time.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/timeb.h>
#include <string.h>

// crt_times.c
// compile with: /W3
// This program demonstrates these time and date functions:
//      time         _ftime    ctime_s     asctime_s
//      _localtime64_s    _gmtime64_s    mktime    _tzset
//      _strtime_s     _strdate_s  strftime
//
// Also the global variable:
//      _tzname
//

int time_demo()
{
    char tmpbuf[128], timebuf[26], ampm[] = "AM";
    time_t ltime;
    struct _timeb tstruct;
    struct tm today, gmt, xmas = { 0, 0, 12, 25, 11, 93 };
    errno_t err;

    // Set time zone from TZ environment variable. If TZ is not set,
    // the operating system is queried to obtain the default value 
    // for the variable. 
    //
    _tzset();

    // Display operating system-style date and time. 
    _strtime_s( tmpbuf, 128 );
    printf( "OS time:\t\t\t\t%s\n", tmpbuf );
    _strdate_s( tmpbuf, 128 );
    printf( "OS date:\t\t\t\t%s\n", tmpbuf );

    // Get UNIX-style time and display as number and string. 
    time( &ltime );
    printf( "Time in seconds since UTC 1/1/70:\t%ld\n", ltime );
    err = ctime_s(timebuf, 26, &ltime);
    if (err)
    {
       printf("ctime_s failed due to an invalid argument.");
       exit(1);
    }
    printf( "UNIX time and date:\t\t\t%s", timebuf );

    // Display UTC. 
    err = _gmtime64_s( &gmt, &ltime );
    if (err)
    {
       printf("_gmtime64_s failed due to an invalid argument.");
    }
    err = asctime_s(timebuf, 26, &gmt);
    if (err)
    {
       printf("asctime_s failed due to an invalid argument.");
       exit(1);
    }
    printf( "Coordinated universal time:\t\t%s", timebuf );

    // Convert to time structure and adjust for PM if necessary. 
    err = _localtime64_s( &today, &ltime );
    if (err)
    {
       printf("_localtime64_s failed due to an invalid argument.");
       exit(1);
    }
    if( today.tm_hour >= 12 )
    {
   strcpy_s( ampm, sizeof(ampm), "PM" );
   today.tm_hour -= 12;
    }
    if( today.tm_hour == 0 )  // Adjust if midnight hour.
   today.tm_hour = 12;

    // Convert today into an ASCII string 
    err = asctime_s(timebuf, 26, &today);
    if (err)
    {
       printf("asctime_s failed due to an invalid argument.");
       exit(1);
    }

    // Note how pointer addition is used to skip the first 11 
    // characters and printf is used to trim off terminating 
    // characters.
    //
    printf( "12-hour time:\t\t\t\t%.8s %s\n",
       timebuf + 11, ampm );

    // Print additional time information. 
    _ftime( &tstruct ); // C4996
    // Note: _ftime is deprecated; consider using _ftime_s instead
    printf( "Plus milliseconds:\t\t\t%u\n", tstruct.millitm );
    printf( "Zone difference in hours from UTC:\t%u\n", 
             tstruct.timezone/60 );
    printf( "Time zone name:\t\t\t\t%s\n", _tzname[0] ); //C4996
    // Note: _tzname is deprecated; consider using _get_tzname
    printf( "Daylight savings:\t\t\t%s\n", 
             tstruct.dstflag ? "YES" : "NO" );

    // Make time for noon on Christmas, 1993. 
    if( mktime( &xmas ) != (time_t)-1 )
    {
       err = asctime_s(timebuf, 26, &xmas);
       if (err)
       {
          printf("asctime_s failed due to an invalid argument.");
          exit(1);
       }
       printf( "Christmas\t\t\t\t%s\n", timebuf );
    }

    // Use time structure to build a customized time string. 
    err = _localtime64_s( &today, &ltime );
    if (err)
    {
        printf(" _localtime64_s failed due to invalid arguments.");
        exit(1);
    }

    // Use strftime to build a customized time string. 
    strftime( tmpbuf, 128,
         "Today is %A, day %d of %B in the year %Y.\n", &today );
    printf( tmpbuf );
}
----------------------//====




// test for addMissingFrames
void test1() {
	std::list<FFace> l;

	{
		FFace f1;
		f1.frame_id = 1;
		f1.x = 400;
		l.push_back(f1);
	}
	{	
		FFace f;
		f.frame_id = 4;
		f.x = 100;
		l.push_back(f);
	}
	{	
		FFace f;
		f.frame_id = 5;
		f.x = 50;
		l.push_back(f);
	}
	{	
		FFace f;
		f.frame_id = 7;
		f.x = 250;
		l.push_back(f);
	}





	//int j = 0;
	//for (int i = 0 ; i < 10 ; i += ++j)
	//{
	//	FFace f;
	//	f.frame_id = i;
	//	f.x = j * 100 + 100;
	//	f.y = f.height = f.width = 0;
	//	l.push_back(f);
	//}
	bool b = addMissingFrames(l);
}
